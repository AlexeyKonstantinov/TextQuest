const mainMenu = document.getElementById("main-menu");
const phrases = [
  "–ì–æ—Ç–æ–≤ –∫ —ç–∫—à–µ–Ω—É?",
  "–¢—ã –±—É–¥–µ—à—å —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ–± —ç—Ç–æ–º –≤–Ω—É–∫–∞–º üíØ",
  "–ü—Ä –∫–¥ —á–¥",
  "–ò–≥—Ä–∞–π —É–∂–µ!",
  "1000-7",
  "–î—Ä—É–≥–∏–µ –∏–≥—Ä—ã —Ñ—É—Ñ–ª–æ!"
];
const mainText = document.getElementById("main-text");
const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];
mainText.textContent = randomPhrase;

const endingsMenu = document.getElementById("endings-menu");
const startBtn = document.getElementById("start-btn");
const endingsBtn = document.getElementById("endings-btn");
const backToMenuBtn1 = document.getElementById("back-to-menu-btn1");
const backToMenuBtn = document.getElementById("back-to-menu-btn");
const finishBtn = document.getElementById("finish-button")
const passageElement = document.getElementById("passage");
const passageImage = document.getElementById("passage-image");
const passageText = document.getElementById("passage-text");
const optionButtons = document.getElementById("option-buttons");
const endingsContainer = document.getElementById("endings-container");
const popupEnding = document.getElementById('popup-ending');
const closePopupButton = document.getElementById('close-popup');
const popupEndingHeader = document.getElementById('popup-ending-header');
const popupEndingText = document.getElementById('popup-ending-text');
const popupEndingImage = document.getElementById('popup-ending-image');

for (let i = 1; i <= 26; i++) {
  const button = document.createElement("button");
  button.classList.add("ending-button-closed");
  button.id = "end_" + i;
  button.textContent = i;
  endingsContainer.appendChild(button);
} //–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ü–æ–≤–æ–∫

const endingButtons = document.querySelectorAll(".ending-button-closed, .ending-button-opened");
// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ü–æ–≤–æ–∫

let avatarImage = document.querySelector(".button-avatar");
let avatarImage1 = document.querySelector(".player-avatar");

let openedEndings = [];
let endings = {};

for (let i = 1; i <= 26; i++) {
  endings["end_" + i] = { header: "h" + i, text: "t" + i, image: "img" };
} //—Å–æ–∑–¥–∞—ë–º –º–∞—Å—Å–∏–≤ –¥–ª—è –∫–æ–Ω—Ü–æ–≤–æ–∫

let player;

    ysdk.getPlayer().then(_player => {
        player = _player;
        player.getData(['endings', 'Openedendings', 'avatar']).then(data => {
          if (data.Openedendings) 
  {
          console.log('Loaded data:', data);
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          let loadedEndings = data.endings;
          let loadedOpenedEndings = data.Openedendings;
          let loadedAvatar = data.avatar;
          
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω—É–∂–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          endings = endings;
          openedEndings = loadedOpenedEndings;
          avatarImage.src = loadedAvatar || 'resources/av1.png';
          avatarImage1.src = loadedAvatar || 'resources/av1.png';

  }
  else {

  }
      }).catch(err => {
          console.error('Error loading data:', err);
      });  
    }).catch(err => {
  // –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ Player.
    });


let passages;


// –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
endingButtons.forEach(button => {
  const endingId = button.id;
  const ending = endings[endingId];
  button.style.backgroundImage = `url(${ending.image})`;
  button.style.backgroundSize = "cover";
});

//openedEndings.push("end_2") //–¥–æ–±–∞–≤–∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–æ–Ω—Ü–æ–≤–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞

fetch('story_1.json')
    .then(response => response.json())
    .then(jsonResponse => passages = jsonResponse.passages);

startBtn.addEventListener("click", startGame);
endingsBtn.addEventListener("click", openEndingsMenu)
backToMenuBtn1.addEventListener("click", backToMenu1)
backToMenuBtn.addEventListener("click", backToMenu)
closePopupButton.addEventListener('click', () => {
  popupEnding.style.display = 'none';
});
document.addEventListener("contextmenu", function(event) {
  event.preventDefault();
});

for (const endingElement of endingsContainer.children) {
  endingElement.addEventListener("click", function () {
    showEndingPopup(endingElement.id)
  })
}

function showEndingPopup(id) {
  popupEnding.style.display = 'block'
  if (!openedEndings.includes(id)){
    popupEndingHeader.innerHTML = "–ö–æ–Ω—Ü–æ–≤–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞"
    popupEndingText.innerHTML = "–ö–æ–Ω—Ü–æ–≤–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞!"
    //popupEndingImage.src = endings[id].image;
    popupEndingImage.src = "resources/22.png";
    return
  }
  popupEndingHeader.innerHTML = endings[id].header
  popupEndingText.innerHTML = endings[id].text
  popupEndingImage.src = endings[id].image;
}

function openPopup() {
  var avatarButton = document.querySelector('.avatar-button');
  var Avpopup = document.querySelector('.av-popup');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ popup –æ–∫–Ω–∞
  if (Avpopup.style.display === 'block') {
    // –ï—Å–ª–∏ popup –æ–∫–Ω–æ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ, —Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
    Avpopup.style.display = 'none';
  } else {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∞
    var buttonRect = avatarButton.getBoundingClientRect();
  
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é popup –æ–∫–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
    if (window.innerWidth > window.innerHeight) {
      // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞
      Avpopup.style.top = (buttonRect.top + buttonRect.height + avatarButton.offsetHeight) + 'px';
      //Avpopup.style.left = buttonRect.left + 'px';
      Avpopup.style.left = (buttonRect.left + buttonRect.width + avatarButton.offsetWidth) + 'px';
    } else {
      // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞
      Avpopup.style.top = (buttonRect.top + buttonRect.height) + 'px';
      Avpopup.style.left = (buttonRect.left + buttonRect.width + avatarButton.offsetWidth) + 'px';
    }
  
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º popup –æ–∫–Ω–æ
    Avpopup.style.display = 'block';
  }
}


function selectAvatar(avatarPath) {
  // –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–≤–∞—Ç–∞—Ä–∞
  console.log('–í—ã–±—Ä–∞–Ω –∞–≤–∞—Ç–∞—Ä:', avatarPath);
  //var avatarImage = document.querySelector(".button-avatar");
  //var avatarImage1 = document.querySelector(".player-avatar");
  avatarImage.src = avatarPath;
  avatarImage1.src = avatarPath; //–Ω–∞ –∞–≤—É —Å—Ç–∞–≤–∏–º
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º popup –æ–∫–Ω–æ
  var Avpopup = document.querySelector('.av-popup');
  Avpopup.style.display = 'none';
}
//function selectAvatar(avatarPath) {
  //var avatarImage = document.querySelector(".button-avatar");
 // avatarImage.src = avatarPath;

  //var Avpopup = document.getElementById("avatar-popup");
  //Avpopup.style.display = "none";
//}

function startGame() {
    console.log("start-game");
    mainMenu.style.display = "none";
    passageElement.style.display = "block";
    var Avpopup = document.querySelector('.av-popup');
    Avpopup.style.display = 'none';

    var startPassage = passages.find(x => x.tags.includes("start"));
    console.log(startPassage.name);
    loadPassage(startPassage.name);
}

function loadPassage(passageName)
{
    var passage = passages.find(x => x.name == passageName);
    passageText.innerHTML = passage.cleanText
    
    let tagsArray = passage.tags.split(" ");
    let imgTag = tagsArray.find(tag => tag.startsWith("img"));
    let endTag = tagsArray.find(tag => tag.startsWith("end_"));
    if (imgTag) {
      var imgNumber = imgTag.slice(3);
      passageImage.src = "resources/" + imgNumber + ".jpg";
    } else {
      passageImage.src = "resources/1.jpg";
    } //–∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–∞—Å—Å–∞–∂–∞–º

    if(endTag){
      openedEndings.push(endTag)
      var endNumber = endTag.slice(4)
      let winTag = tagsArray.find(tag => tag.startsWith("win"));
      if (winTag){
        eval("endings.end_" + endNumber + ".header = '–¢—ã –≤—Å–µ—Ö –Ω–∞–≥–Ω—É–ª!';");
      } else {
        eval("endings.end_" + endNumber + ".header = '–®–æ–∂ —Ç—ã —Ç–∞–∫...';");
      }
      eval("endings.end_" + endNumber + ".text = passage.cleanText;");
      if (imgTag) {
        var imgNumber = imgTag.slice(3);
        eval("endings.end_" + endNumber + ".image = 'resources/" + imgNumber + ".jpg';");
      } else {
        eval("endings.end_" + endNumber + ".image = 'resources/cat.jpeg';");
      }
      player.setData({
        endings: endings,
        Openedendings: openedEndings,
        avatar: avatarImage.src
      }).then(() => {
        console.log('Data is set');
      }).catch(err => {
        console.error('Error setting data:', err);
      });
    } //–≥—Ä—É–∑–∏–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–æ–Ω—Ü–æ–≤–∫—É

    while(optionButtons.firstChild) {
        optionButtons.removeChild(optionButtons.firstChild);
    }

    passage.links.forEach(link => {
        let button = document.createElement('button');
        button.innerText = link.linkText;
        button.classList.add('option-button');
        button.addEventListener('click', () => loadPassage(link.passageName));
        optionButtons.appendChild(button);
    });
}

function openEndingsMenu()
{
  mainMenu.style.display = "none";
  endingsMenu.style.display = "block";
  passageElement.style.display = "none";
  var Avpopup = document.querySelector('.av-popup');
  Avpopup.style.display = 'none';

  // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
endingButtons.forEach(button => {
  const endingId = button.id;
  const ending = endings[endingId];
  button.style.backgroundImage = `url(${ending.image})`;
  button.style.backgroundSize = "cover";
});

  for (const endingElement of endingsContainer.children) {
    if (openedEndings.includes(endingElement.id)){
      endingElement.className = "ending-button-opened"
    }
    else {
      endingElement.className = "ending-button-closed"
    }
  }
}

function backToMenu1()
{
  mainMenu.style.display = "flex";
  passageElement.style.display = "none";
  const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];
  mainText.textContent = randomPhrase; //—Ä–∞–Ω–¥–æ–º–Ω–∞—è —Ñ—Ä–∞–∑–∞ –≤ –º–µ–Ω—é
} 

function backToMenu()
{
  mainMenu.style.display = "flex";
  endingsMenu.style.display = "none";
  popupEnding.style.display = "none"; 
  //–±–µ–∑ –±–∞–≥–æ–≤, –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –∫–æ–Ω—Ü–æ–≤–∫–∞ –≤ –º–µ–Ω—é, —Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∏ –µ—ë.
  const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];
  mainText.textContent = randomPhrase; //—Ä–∞–Ω–¥–æ–º–Ω–∞—è —Ñ—Ä–∞–∑–∞ –≤ –º–µ–Ω—é
} 